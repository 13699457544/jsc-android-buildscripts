diff -aur org/target/webkit/Source/bmalloc/bmalloc/DebugHeap.cpp target/webkit/Source/bmalloc/bmalloc/DebugHeap.cpp
--- org/target/webkit/Source/bmalloc/bmalloc/DebugHeap.cpp	2017-08-02 23:50:33.142768000 +0200
+++ target/webkit/Source/bmalloc/bmalloc/DebugHeap.cpp	2017-09-22 16:07:37.960523944 +0200
@@ -88,13 +88,8 @@
 
 void* DebugHeap::memalign(size_t alignment, size_t size, bool crashOnFailure)
 {
-    void* result;
-    if (posix_memalign(&result, alignment, size)) {
-        if (crashOnFailure)
-            BCRASH();
-        return nullptr;
-    }
-    return result;
+    BCRASH();
+    return nullptr;
 }
 
 void* DebugHeap::realloc(void* object, size_t size)
diff -aur org/target/webkit/Source/cmake/FindICU.cmake target/webkit/Source/cmake/FindICU.cmake
--- org/target/webkit/Source/cmake/FindICU.cmake	2016-11-30 19:45:57.627237000 +0100
+++ target/webkit/Source/cmake/FindICU.cmake	2017-09-22 16:07:37.960523944 +0200
@@ -25,7 +25,7 @@
 # Look for the library.
 find_library(
     ICU_LIBRARY
-    NAMES libicuuc cygicuuc cygicuuc32 icuuc
+    NAMES libicuuc cygicuuc cygicuuc32 icuuc icuuc_jsc
     HINTS ${PC_ICU_LIBRARY_DIRS}
           ${PC_ICU_LIBDIR}
           ${WEBKIT_LIBRARIES_LINK_DIR}
@@ -51,7 +51,7 @@
     pkg_check_modules(PC_ICU_I18N icu-i18n)
     find_library(
         ICU_I18N_LIBRARY
-        NAMES icui18n libicui18n libicuin cygicuin cygicuin32 icuin
+        NAMES icui18n libicui18n libicuin cygicuin cygicuin32 icuin icui18n_jsc
         HINTS ${PC_ICU_I18N_LIBRARY_DIRS}
               ${PC_ICU_I18N_LIBDIR}
               ${WEBKIT_LIBRARIES_LINK_DIR}
@@ -68,7 +68,7 @@
     # Look for the ICU data libraries
     find_library(
         ICU_DATA_LIBRARY
-        NAMES icudata libicudata cygicudata cygicudata32
+        NAMES icudata libicudata cygicudata cygicudata32 icudata_jsc
         HINTS ${PC_ICU_I18N_LIBRARY_DIRS}
               ${PC_ICU_I18N_LIBDIR}
               ${WEBKIT_LIBRARIES_LINK_DIR}
diff -aur org/target/webkit/Source/cmake/OptionsJSCOnly.cmake target/webkit/Source/cmake/OptionsJSCOnly.cmake
--- org/target/webkit/Source/cmake/OptionsJSCOnly.cmake	2017-07-21 15:46:13.271637000 +0200
+++ target/webkit/Source/cmake/OptionsJSCOnly.cmake	2017-09-22 16:09:37.714434733 +0200
@@ -38,7 +38,12 @@
 if (WIN32)
     set(ENABLE_API_TESTS OFF)
 else ()
-    set(ENABLE_API_TESTS ON)
+    set(ENABLE_API_TESTS OFF)
+    set(ENABLE_API_TESTS OFF)
+    set(ENABLE_SAMPLING_PROFILER OFF)
+    set(ENABLE_DFG_JIT OFF)
+    set(ENABLE_FTL_JIT OFF)
+    set(ENABLE_JIT ON)
 endif ()
 
 if (WTF_CPU_X86 OR WTF_CPU_X86_64)
diff -aur org/target/webkit/Source/JavaScriptCore/CMakeLists.txt target/webkit/Source/JavaScriptCore/CMakeLists.txt
--- org/target/webkit/Source/JavaScriptCore/CMakeLists.txt	2017-08-30 12:07:57.867199000 +0200
+++ target/webkit/Source/JavaScriptCore/CMakeLists.txt	2017-09-22 16:07:37.964523874 +0200
@@ -1555,7 +1555,7 @@
 
 target_include_directories(LLIntOffsetsExtractor PRIVATE ${JavaScriptCore_INCLUDE_DIRECTORIES})
 
-add_subdirectory(shell)
+# add_subdirectory(shell)
 
 WEBKIT_WRAP_SOURCELIST(${JavaScriptCore_SOURCES})
 WEBKIT_FRAMEWORK(JavaScriptCore)
@@ -1567,6 +1567,7 @@
         install(TARGETS JavaScriptCore DESTINATION "${LIB_INSTALL_DIR}")
     endif ()
 endif ()
+set_target_properties(JavaScriptCore PROPERTIES OUTPUT_NAME jsc)
 
 # Force staging of shared scripts, even if they aren't directly used to build JavaScriptCore.
 
diff -aur org/target/webkit/Source/WTF/wtf/linux/MemoryFootprintLinux.cpp target/webkit/Source/WTF/wtf/linux/MemoryFootprintLinux.cpp
--- org/target/webkit/Source/WTF/wtf/linux/MemoryFootprintLinux.cpp	2017-05-12 07:21:41.606604000 +0200
+++ target/webkit/Source/WTF/wtf/linux/MemoryFootprintLinux.cpp	2017-09-22 16:19:31.792092365 +0200
@@ -34,7 +34,7 @@
 
 namespace WTF {
 
-#if OS(LINUX)
+/*#if OS(LINUX)
 template<typename Functor>
 static void forEachLine(FILE* file, Functor functor)
 {
@@ -47,11 +47,11 @@
         size = 0;
     }
 }
-#endif
+#endif*/
 
 std::optional<size_t> memoryFootprint()
 {
-#if OS(LINUX)
+/*#if OS(LINUX)
     FILE* file = fopen("/proc/self/smaps", "r");
     if (!file)
         return std::nullopt;
@@ -88,7 +88,7 @@
     });
     fclose(file);
     return totalPrivateDirtyInKB * KB;
-#endif
+#endif*/
     return std::nullopt;
 }
 
diff -aur org/target/webkit/Source/WTF/wtf/PlatformUserPreferredLanguagesUnix.cpp target/webkit/Source/WTF/wtf/PlatformUserPreferredLanguagesUnix.cpp
--- org/target/webkit/Source/WTF/wtf/PlatformUserPreferredLanguagesUnix.cpp	2016-10-08 05:31:15.318259000 +0200
+++ target/webkit/Source/WTF/wtf/PlatformUserPreferredLanguagesUnix.cpp	2017-09-22 16:07:37.964523874 +0200
@@ -24,24 +24,29 @@
 #include <locale.h>
 #include <wtf/Vector.h>
 #include <wtf/text/WTFString.h>
+#include <sys/system_properties.h>
 
 namespace WTF {
 
 void setPlatformUserPreferredLanguagesChangedCallback(void (*)()) { }
 
-// Using pango_language_get_default() here is not an option, because
-// it doesn't support changing the locale in runtime, so it returns
-// always the same value.
 static String platformLanguage()
 {
-    String localeDefault(setlocale(LC_CTYPE, nullptr));
-    if (localeDefault.isEmpty() || equalIgnoringASCIICase(localeDefault, "C") || equalIgnoringASCIICase(localeDefault, "POSIX"))
+    char buf[2 * (PROP_VALUE_MAX + 1)];
+
+    int locale_len = __system_property_get("persist.sys.locale", buf);
+    if (locale_len == 0) {
+      int lang_len = __system_property_get("persist.sys.language", buf);
+      if(lang_len == 0) {
         return ASCIILiteral("en-US");
+      }
+      int country_len = __system_property_get("persist.sys.country", buf + lang_len + 1);
+      if(country_len != 0) {
+        buf[lang_len] = '-';
+      }
+    }
 
-    String normalizedDefault = localeDefault;
-    normalizedDefault.replace('_', '-');
-    normalizedDefault.truncate(normalizedDefault.find('.'));
-    return normalizedDefault;
+    return String(buf);
 }
 
 Vector<String> platformUserPreferredLanguages()
diff -aur org/target/webkit/Source/WTF/wtf/unicode/CollatorDefault.cpp target/webkit/Source/WTF/wtf/unicode/CollatorDefault.cpp
--- org/target/webkit/Source/WTF/wtf/unicode/CollatorDefault.cpp	2014-03-15 05:08:27.813217000 +0100
+++ target/webkit/Source/WTF/wtf/unicode/CollatorDefault.cpp	2017-09-22 16:07:45.664389475 +0200
@@ -28,12 +28,13 @@
 
 #include "config.h"
 #include "Collator.h"
+#include <StringView.h>
 
 #if UCONFIG_NO_COLLATION
 
 namespace WTF {
 
-int Collator::collate(StringView a, StringView b) const
+int Collator::collate(StringView a, StringView b)
 {
     unsigned commonLength = std::min(a.length(), b.length());
     for (unsigned i = 0; i < commonLength; ++i) {
@@ -51,7 +52,7 @@
     return 0;
 }
 
-int Collator::collateUTF8(const char* a, const char* b) const
+int Collator::collateUTF8(const char* a, const char* b)
 {
     return collate(String::fromUTF8(a), String::fromUTF8(b));
 }
diff -aur org/target/webkit/Source/cmake/OptionsCommon.cmake target/webkit/Source/cmake/OptionsCommon.cmake
--- org/target/webkit/Source/cmake/OptionsCommon.cmake      2017-11-15 16:28:52.120093206 +0100
+++ target/webkit/Source/cmake/OptionsCommon.cmake  2017-04-09 02:50:32.875166000 +0200
@@ -255,7 +255,7 @@

 # Check for headers
 _HAVE_CHECK_INCLUDE(HAVE_ERRNO_H errno.h)
-_HAVE_CHECK_INCLUDE(HAVE_LANGINFO_H langinfo.h)
+#_HAVE_CHECK_INCLUDE(HAVE_LANGINFO_H langinfo.h)
 _HAVE_CHECK_INCLUDE(HAVE_MMAP sys/mman.h)
 _HAVE_CHECK_INCLUDE(HAVE_PTHREAD_NP_H pthread_np.h)
 _HAVE_CHECK_INCLUDE(HAVE_STRINGS_H strings.h)

